FOR   LOOP
Q.1  WAP that takes a command line argument n and print nth harmonic number.
#!/bin/bash
read -p "enter the number" num
sum=0.0
for (( i=1; i <= $num; i++ ))
do
   sum+=1.0/$i
done
echo $sum

Q.2 WAP takes a input and determines if the number is a prime.
#!/bin/bash
read -p "enter the number : " n
for (( i=2 ; i<=$n/2 ;++i ))
do
   if [ $((n%i)) -eq 0 ]
   then
    	echo "$n is not prime number "
    	exit
   fi
done
echo "$n is prime number" 

Q.3 extend the program to take a range of number as input and output the prime numbers in that range.

Ans.
#!/bin/bash -x
 
read -p "enter the 1st interval number : " num1
read -p "enter the last interval number : "num2
flag=0;
while [ $num1 -lt $num2 ]
do
    	$flag=0
if [ $num1 -lt 1 ]
then
    	$num1++;
    	continue;
fi
for ((i=2; i<=$num1/2; i++ ))
do
    	if [ $($num1 % $i) -eq 0 ]
            	then
            	$flag=1;
            	break;
    	fi
done
if [[ $flag -eq 0 ]]
then
    	echo $num1
    	++$num1;
fi
 
 
 
Q.5 write a program that computes a factorial of number tsken as input .
Ans:
#!/bin/bash -x
echo -n "enter the number : "
read num
factorial=1;
for (( i=1; i<=$num ; i++ ))
do
    	factorial=$[ $factorial*$i ]
done
echo "the factorial of $num is $factorial"

Q.6 write a program to compute factors of a number N using prime factorization method.
Ans:
#!/bin/bash
echo  "enter the number: "
read num
echo  " factors of $num are : "
for (( i=1; i<=$num; i++ ))
do
    	if [ $(($num%$i)) -eq 0 ]
    	then
            	echo "$i"
 
    	fi
done
 
 
FUNCTIONS
Q.1 Help user find degF or degC  based on their conversion selection. Use case statement and ensure that the input are within the freezing point (0c/32F) and the boiling point of wter (100c/212F)
a)degF=(degC*9/5)+32
b)degC=(degF-32)*5/9
 
Ans: #!/bin/bash
Function cel_to_fer() {
Read –p “enter Fahrenheit degree: “ degF
If [[ $degF –ge 32 && $degF –le  212 ]]
Then
	degC=$(( ($degF-32) * 5/9 ))
	echo “$degF F=$degC C*
else
	echo “pls select the degree [32F to 212F ]*
fi
}
Function fer_to_cel() {
Read –p “enter celsius degree: “ degC
If [[ $degC –ge 0 && $degC –le 100 ]]
Then
	degF=$(( ( $degC*9/5)  +32 ))
	echo “$degC C=$degF F*
else
	echo “pls select degree [0 to 100 C]”
fi
}
Echo “1: convert C into F “
Echo “2:convert F into C”
Read –p “enter your choice [1 or 2]: “ ch
Case $ch in
1)cel_to_fer
Echo $fer_to_cel
;;
2)fer_to_cel
Echo $fer_to_cel
;;
*)echo “wrong choice
‘’
Esac

Q.2 write a function to check if the two numbers are palindromes.
Ans:
Function palindrome_num()  {
While [[ $num –gt  0 ]]
Do
  Val=$(($num %10))
Num=$(($num/10))
Rev=$(($rev *10 +$val))
Done
Echo “reverse num: $rev”
If [$temp –eq $rev ]
Then
	Echo “$temp is palindrome number”
Else
Echo “$temp is not palindrome number”
Fi
}
Read –p “enter any number : “num
Val=0
Rev=0
Temp=$num
Palindrome_num $num

Q3. Take a number from user and check if the number is a prime then show that its palindrome is also prime
Ans.
#!/bin/bash
Function check_palindrom() {
Val=$num
While [[ $val –gt 0 ]]
Do
Rmd=$(($val%10))
Va;=$(($val/10))
Rev=$(($rev*10+$rem))
Done
Echo “reverse value is :”  $rev
 
If [[ $temp –eq  $rev  ]]
Then
Echo “number is palindrome”
Else
Echo “ number is not palindrome”
Fi
}
 
Function check_palindrom()  {
For (( i=1; i<=$num ;  i++  ))
Do
If [[ $num%$i –eq 0 ]]
Then
checkNum=$(($checkNum +1))
fi
done
if [$check_num  -eq  2]
then
echo “$num : is palindrome”
else
echo “$num : is not palindrome”
fi
}
Read –p “enter any number:” $num
Temp=$num
Rev=0
Rmd=0
Check_palindrom
Check_prime

